generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Users {
  id                              String         @id @default(auto()) @map("_id") @db.ObjectId
  role                            UserRole
  username                        String
  email                           String         @unique
  jwt_token                       String?        @unique
  password                        String
  reset_password_token            String?        @unique
  reset_password_token_expires_at String?
  corridas                        Corridas[]
  agendamendos                    Agendamentos[]
  created_at                      DateTime
  updated_at                      DateTime?

  @@unique(fields: [email, reset_password_token], name: "resetPasswordTokenIsValid")
  @@map("users")
}

enum UserRole {
  GESTOR
  AFILIADO
  COMUM
}

model Pistas {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  km                 Int
  quantidade_boxes   Int
  quantidade_lugares Int
  endereco           String
  created_at         DateTime
  updated_at         DateTime?

  corridas     Corridas[]
  agendamentos Agendamentos[]

  @@map("pistas")
}

model Karts {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  status      KartStatus
  name        String
  marca       String
  modelo      String
  potencia    Int
  marca_pneus String
  created_at  DateTime
  updated_at  DateTime?

  manutencoes  Manutencoes[]
  corridas     Corridas[]
  agendamentos Agendamentos[]

  @@map("karts")
}

enum KartStatus {
  LOCADO
  MANUTENCAO
  LIVRE
}

model Agendamentos {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String     @db.ObjectId
  kart_id     String     @db.ObjectId
  kart_status KartStatus
  pista_id    String     @db.ObjectId
  starts_at   DateTime
  ends_at     DateTime
  created_at  DateTime
  updated_at  DateTime?

  user  Users  @relation(fields: [user_id], references: [id])
  kart  Karts  @relation(fields: [kart_id], references: [id])
  pista Pistas @relation(fields: [pista_id], references: [id])

  @@map("agendamentos")
}

model Corridas {
  id                             String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id                        String    @db.ObjectId
  kart_id                        String    @db.ObjectId
  pista_id                       String    @db.ObjectId
  starts_at                      DateTime
  has_agendamento_in_this_period Boolean
  created_at                     DateTime
  updated_at                     DateTime?

  user  Users  @relation(fields: [user_id], references: [id])
  kart  Karts  @relation(fields: [kart_id], references: [id])
  pista Pistas @relation(fields: [pista_id], references: [id])

  @@map("corridas")
}

model Manutencoes {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  kart_id    String    @db.ObjectId
  motivo     String
  starts_at  DateTime
  ends_at    DateTime
  finished   Boolean
  created_at DateTime
  updated_at DateTime?

  kart Karts @relation(fields: [kart_id], references: [id])

  @@map("manutencoes")
}
