generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  role       UserRole
  role_token String    @unique
  name       String    @unique
  email      String    @unique
  jwt_token  String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime?

  races          Race[]
  schedules      Schedule[]
  notification   Notification? @relation(fields: [notificationId], references: [id], onDelete: Restrict)
  notificationId String?       @db.ObjectId

  @@map("users")
}

enum UserRole {
  MANAGER
  AFFILIATE
  COMMON
}

model Road {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String    @unique
  kilometers      Int
  quantity_boxes  Int
  quantity_places Int
  address         String
  created_at      DateTime  @default(now())
  updated_at      DateTime?

  races     Race[]
  schedules Schedule[]
  accidents Accident[]

  @@map("roads")
}

model Kart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  status     KartStatus
  name       String     @unique
  brand      String
  model      String
  power      Int
  tire_brand String
  created_at DateTime   @default(now())
  updated_at DateTime?

  maintenances Maintenance[]
  races        Race[]
  schedules    Schedule[]

  @@map("karts")
}

enum KartStatus {
  LEASED
  IN_MAINTENANCE
  AVAILABLE
}

model Schedule {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String    @db.ObjectId
  kart_id    String    @db.ObjectId
  road_id    String    @db.ObjectId
  starts_at  DateTime
  ends_at    DateTime
  created_at DateTime  @default(now())
  updated_at DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  kart Kart @relation(fields: [kart_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  road Road @relation(fields: [road_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("schedules")
}

model Race {
  id                                 String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id                            String     @db.ObjectId
  kart_id                            String     @db.ObjectId
  road_id                            String     @db.ObjectId
  starts_at                          DateTime
  ends_at                            DateTime?
  had_an_schedule_during_this_period Boolean
  status                             RaceStatus
  created_at                         DateTime   @default(now())
  updated_at                         DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  kart Kart @relation(fields: [kart_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  road Road @relation(fields: [road_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("races")
}

enum RaceStatus {
  SCHEDULED
  FINISHED
  ABORTED
}

model Maintenance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  kart_id    String    @db.ObjectId
  reason     String
  starts_at  DateTime
  ends_at    DateTime
  created_at DateTime  @default(now())
  updated_at DateTime?

  kart Kart @relation(fields: [kart_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("maintenances")
}

model Accident {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  involved    Json
  road_id     String    @db.ObjectId
  happened_at DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  road Road @relation(fields: [road_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("accidents")
}

model Notification {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  type              NotificationType
  message           String           @db.ObjectId
  send_to_users_ids String[]

  created_at DateTime @default(now())
  User       User[]

  @@map("notifications")
}

enum NotificationType {
  RACE_STARTED
  RACE_ACCIDENT
}
